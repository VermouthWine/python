#  プロフィール入力処理
@app.route("/profile_input", methods=["GET", "POST"])
def profile_input():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    if request.method == 'POST':
        name = request.form.get("name")
        age = request.form.get("age")
        location = request.form.get("location")
        occupation = request.form.get("occupation")
        education = request.form.get("education")
        certifications = request.form.get("certifications")
        bio = request.form.get("bio")

#supabaseのtableにデータを追加
        try:
            result = supabase.table("profile").upsert({
                "user_id": session['user_id'],  # ユーザーIDを指定
                "name": name,
                "age": age,
                "location": location,
                "occupation": occupation,
                "education": education,
                "certifications": certifications,
                "bio": bio,
            }, on_conflict=["user_id"]).execute()

            if result.error:
                print("保存エラー:", result.error)
                return render_template("profile_input.html", error="保存に失敗しました。")

            return redirect(url_for("profile_output"))
        
        except Exception as e:
            print(f"Supabase保存中にエラー: {e}")
            return render_template("profile_input.html", error="予期せぬエラーが発生しました。")

    # GET時は入力フォーム表示
    return render_template("profile_input.html")

# プロフィールアウトプット表示
@app.route("/profile_output", methods=["GET"])
def profile_output():
    if 'user_id' in session:
        user_id = session['user_id']
        # Supabaseからプロフィール情報を取得
        try:
            profile = supabase.table("profile").select("*").eq("user_id", user_id).execute()
            if profile.data:
                return render_template("profile_output.html", profile=profile.data[0])
            else:
                return render_template("profile_output.html", error="プロフィールが見つかりません。")
        except Exception as e:
            print(f"プロフィール取得に失敗しました。エラー内容: {e}")
            return render_template("profile_output.html", error="プロフィールの取得に失敗しました。")
    else:
        return redirect(url_for('login'))



@app.route("/dashboard")
def dashboard():
    if 'user_id' in session:
        return render_template("dashboard.html", user_id=session['user_id'], user_email=session['user_email'])
    else:
        return redirect(url_for('login'))



HTML
<form method="post" action="/create-skillsheet">
    <div class="form-group">
        <label for="python">Python:</label>
        <select id="python" name="python">
            <option value="">-</option>
            <option value="S">S (上級、教育可能)</option>
            <option value="A">A (中級、1人称対応可能)</option>
            <option value="B">B (業務経験あり)</option>
            <option value="C">C (知識のみ、研修レベル)</option>
            <option value="D">D (経験なし)</option>
        </select>
    </div>

    <div class="form-group">
        <label for="javascript">JavaScript:</label>
        <select id="javascript" name="javascript">
            <option value="">-</option>
            <option value="S">S (上級、教育可能)</option>
            <option value="A">A (中級、1人称対応可能)</option>
            <option value="B">B (業務経験あり)</option>
            <option value="C">C (知識のみ、研修レベル)</option>
            <option value="D">D (経験なし)</option>
        </select>
    </div>

    <button type="submit">送信</button>
</form>



app.py
from flask import Flask, request, redirect, url_for
import supabase
import os

app = Flask(__name__)

# Supabaseの初期化
url = os.getenv("SUPABASE_URL")
key = os.getenv("SUPABASE_KEY")
supabase_client = supabase.create_client(url, key)

@app.route('/create-skillsheet', methods=['POST'])
def create_skillsheet():
    # フォームからデータを受け取る
    python_level = request.form.get('python')
    javascript_level = request.form.get('javascript')

    # Supabaseにデータを保存
    data = {
        "python": python_level,
        "javascript": javascript_level,
        "user_id": "ユーザーのID"  # ここは実際のユーザーIDに置き換えてください
    }

    response = supabase_client.table('skillsheet').insert(data).execute()
    
    if response.status_code == 201:
        print("データの保存に成功しました")
        return redirect(url_for('dashboard'))
    else:
        print("データの保存に失敗しました", response.error_message)
        return "保存エラー", 500


DB構成
| カラム名        | タイプ                          |
| ----------- | ---------------------------- |
| id          | SERIAL                       |
| user\_id    | TEXT                         |
| python      | TEXT                         |
| javascript  | TEXT                         |
| created\_at | TIMESTAMPTZ (default: now()) |






@app.route("/skillsheet_input", methods=["GET", "POST"])
def skillsheet_input():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    if request.method == "POST":
        # フォームの項目名リストを作成
        fields = [
            "language_python", "language_ruby", "language_js", "language_shell",
            "language_c", "language_cpp", "language_csharp", "language_java",
            "language_php", "language_go", "language_html", "language_css",
            "language_swift", "language_kotlin", "language_vba"
        ]
        
        # 入力されたデータを辞書に格納
        data = {field: request.form.get(field) for field in fields}
        data["user_id"] = session['user_id']
        data["updated_at"] = datetime.utcnow().isoformat()

        try:
            # Supabaseにデータを保存
            result = supabase.table("skillsheet").upsert(data, on_conflict=["user_id"]).execute()

            # エラーハンドリング
            if result.status_code != 200:
                return render_template("skillsheet_input.html", error="スキルシートの保存に失敗しました。")

            return redirect(url_for("skillsheet_output"))  # 成功時に遷移

        except Exception as e:
            print(f"エラー: {e}")
            return render_template("skillsheet_input.html", error="予期せぬエラーが発生しました。")

    return render_template("skillsheet_input.html")





#  スキルシート作成ページ & 処理
@app.route("/skillsheet_input", methods=["GET", "POST"])
def skillsheet_input():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    if request.method == "POST":
        # フォームからデータ取得
        
        python = request.form.get("language_python")
        
        
        # 他の言語も必要に応じて追加

        try:
            # Supabaseのテーブルにスキルシートデータを保存
            result = supabase.table("skillsheet").upsert({
                "user_id": session['user_id'],
                "python": python,
                
                # 他のスキルも追加
            }, on_conflict=["user_id"]).execute()

            if result.model_dump().get("error"):
                print("保存エラー:", result.error)
                return render_template("skillsheet_input.html", error="スキルシートの保存に失敗しました。")

            return redirect(url_for("skillsheet_output"))

        except Exception as e:
            print(f"エラー: {e}")
            return render_template("skillsheet_input.html", error="予期せぬエラーが発生しました。")

    return render_template("skillsheet_input.html")



    # スキルシート出力画面
@app.route("/skillsheet_output", methods=["GET"])
def skillsheet_output():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    try:
        response = supabase.table("skillsheet").select("*").eq("user_id", session['user_id']).execute()

        if response.data and len(response.data) > 0:
            skillsheet_data = response.data[0]

            # user_id や updated_at を除いて、空でないスキルだけ抽出
            display_skills = {
                key: value for key, value in skillsheet_data.items()
                if key not in ["user_id", "updated_at"] and value
            }

            return render_template("skillsheet_output.html", skillsheet=display_skills)

        else:
            return render_template("skillsheet_output.html", error="スキルシートが見つかりません。")

    except Exception as e:
        print(f"スキルシート取得エラー: {e}")
        return render_template("skillsheet_output.html", error="スキルシートの取得に失敗しました。")



# skillsheetoutput.html
<!DOCTYPE html>
<html>
<head>
    <title>スキルシート表示</title>
</head>
<body>
    <h1>スキルシートの内容</h1>
    {% if error %}
        <p style="color:red;">{{ error }}</p>
    {% else %}
        <table border="1">
            <tr>
                <th>スキル</th>
                <th>レベル</th>
            </tr>
            {% for skill, level in skillsheet.items() %}
            <tr>
                <td>{{ skill.replace('_', ' ').title() }}</td>
                <td>{{ level }}</td>
            </tr>
            {% endfor %}
        </table>
    {% endif %}
</body>
</html>


# スキルシート出力画面 app.py
@app.route("/skillsheet_output", methods=["GET"])
def skillsheet_output():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    try:
        response = supabase.table("skillsheet").select("*").eq("user_id", session['user_id']).execute()
       
        # デバッグ出力
        print("スキルシート取得結果:", response.data)
        print("display_skills:", display_skills)



        if response.data and len(response.data) > 0:
            skillsheet_data = response.data[0]

            # user_id や updated_at を除いて、空でないスキルだけ抽出
            display_skills = {
                key: value for key, value in skillsheet_data.items()
                if key not in ["user_id", "updated_at"] and value
            }

            return render_template("skillsheet_output.html", skillsheet=display_skills)

        else:
            return render_template("skillsheet_output.html", error="スキルシートが見つかりません。")

    except Exception as e:
        print(f"スキルシート取得エラー: {e}")
        return render_template("skillsheet_output.html", error="スキルシートの取得に失敗しました。")





# 共通関数: Supabaseからデータを取得する
def get_supabase_data(table_name, user_id, exclude_fields=None):
    """
    Supabaseからデータを取得し、指定されたフィールドを除外する。

    :param table_name: Supabaseのテーブル名
    :param user_id: ユーザーID
    :param exclude_fields: 除外するフィールドのリスト（デフォルトは["user_id", "created_at", "updated_at"]）
    :return: 取得したデータの辞書 or None
    """
    if exclude_fields is None:
        exclude_fields = ["user_id", "created_at", "updated_at"]

    try:
        response = supabase.table(table_name).select("*").eq("user_id", user_id).execute()
        print(f"{table_name} 取得結果:", response.data)

        if response.data and len(response.data) > 0:
            # 不要なフィールドを除外したデータを返す
            return {
                key: value for key, value in response.data[0].items()
                if key not in exclude_fields and value
            }
        else:
            return None
    except Exception as e:
        print(f"{table_name} 取得エラー:", e)
        return None


#  ダッシュボード（ログイン後のページ）
@app.route("/dashboard")
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    user_id = session['user_id']
    user_email = session.get('user_email')

    # 取得したいテーブル名と変数名のペア
    tables = {
        "profile": "profile",
        "skillsheet": "skillsheet",
        "projects": "projects"
    }

    # データ取得
    data = {}
    for table_name, var_name in tables.items():
        data[var_name] = get_supabase_data(table_name, user_id)

    # プロジェクトは複数行ある可能性があるので、リスト形式でテンプレートに渡す
    if data["projects"]:
        data["projects"] = [data["projects"]] if isinstance(data["projects"], dict) else data["projects"]

    # テンプレートに渡す
    return render_template(
        "dashboard.html",
        user_id=user_id,
        user_email=user_email,
        profile=data["profile"],
        skillsheet=data["skillsheet"],
        projects=data["projects"]
    )
